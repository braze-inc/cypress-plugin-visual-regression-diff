{"version":3,"file":"plugins.mjs","sources":["../src/constants.ts","../node_modules/truncate-utf8-bytes/lib/truncate.js","../node_modules/truncate-utf8-bytes/index.js","../node_modules/sanitize-filename/index.js","../src/screenshotPath.utils.ts","../src/image.utils.ts","../src/afterScreenshot.hook.ts","../src/task.hook.ts","../src/plugins.ts"],"sourcesContent":["const PLUGIN_NAME = \"cp-visual-regression-diff\";\nexport const LINK_PREFIX = `#${PLUGIN_NAME}-`;\nexport const OVERLAY_CLASS = `${PLUGIN_NAME}-overlay`;\nexport const IMAGE_SNAPSHOT_PREFIX = `__${PLUGIN_NAME}_snapshots__`;\n\nexport enum FILE_SUFFIX {\n  diff = \".diff\",\n  actual = \".actual\",\n}\n\nexport const TASK = {\n  getScreenshotPathInfo: `${PLUGIN_NAME}-getScreenshotPathInfo`,\n  compareImages: `${PLUGIN_NAME}-compareImages`,\n  approveImage: `${PLUGIN_NAME}-approveImage`,\n  cleanupImages: `${PLUGIN_NAME}-cleanupImages`,\n  doesFileExist: `${PLUGIN_NAME}-doesFileExist`,\n  runAfterScreenshotHook: `${PLUGIN_NAME}-runAfterScreenshotHook`,\n  /* c8 ignore next */\n};\n\nexport const PATH_VARIABLES = {\n  specPath: \"{spec_path}\",\n  unixSystemRootPath: \"{unix_system_root_path}\",\n  winSystemRootPath: \"{win_system_root_path}\",\n} as const;\n\nexport const WINDOWS_LIKE_DRIVE_REGEX = /^[A-Z]:$/;\n\nexport const METADATA_KEY = \"FRSOURCE_CPVRD_V\";\n","'use strict';\n\nfunction isHighSurrogate(codePoint) {\n  return codePoint >= 0xd800 && codePoint <= 0xdbff;\n}\n\nfunction isLowSurrogate(codePoint) {\n  return codePoint >= 0xdc00 && codePoint <= 0xdfff;\n}\n\n// Truncate string by size in bytes\nmodule.exports = function truncate(getLength, string, byteLength) {\n  if (typeof string !== \"string\") {\n    throw new Error(\"Input must be string\");\n  }\n\n  var charLength = string.length;\n  var curByteLength = 0;\n  var codePoint;\n  var segment;\n\n  for (var i = 0; i < charLength; i += 1) {\n    codePoint = string.charCodeAt(i);\n    segment = string[i];\n\n    if (isHighSurrogate(codePoint) && isLowSurrogate(string.charCodeAt(i + 1))) {\n      i += 1;\n      segment += string[i];\n    }\n\n    curByteLength += getLength(segment);\n\n    if (curByteLength === byteLength) {\n      return string.slice(0, i + 1);\n    }\n    else if (curByteLength > byteLength) {\n      return string.slice(0, i - segment.length + 1);\n    }\n  }\n\n  return string;\n};\n\n","'use strict';\n\nvar truncate = require(\"./lib/truncate\");\nvar getLength = Buffer.byteLength.bind(Buffer);\nmodule.exports = truncate.bind(null, getLength);\n","/*jshint node:true*/\n'use strict';\n\n/**\n * Replaces characters in strings that are illegal/unsafe for filenames.\n * Unsafe characters are either removed or replaced by a substitute set\n * in the optional `options` object.\n *\n * Illegal Characters on Various Operating Systems\n * / ? < > \\ : * | \"\n * https://kb.acronis.com/content/39790\n *\n * Unicode Control codes\n * C0 0x00-0x1f & C1 (0x80-0x9f)\n * http://en.wikipedia.org/wiki/C0_and_C1_control_codes\n *\n * Reserved filenames on Unix-based systems (\".\", \"..\")\n * Reserved filenames in Windows (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\",\n * \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\",\n * \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", and\n * \"LPT9\") case-insesitively and with or without filename extensions.\n *\n * Capped at 255 characters in length.\n * http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs\n *\n * @param  {String} input   Original filename\n * @param  {Object} options {replacement: String | Function }\n * @return {String}         Sanitized filename\n */\n\nvar truncate = require(\"truncate-utf8-bytes\");\n\nvar illegalRe = /[\\/\\?<>\\\\:\\*\\|\"]/g;\nvar controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\nvar reservedRe = /^\\.+$/;\nvar windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\nvar windowsTrailingRe = /[\\. ]+$/;\n\nfunction sanitize(input, replacement) {\n  if (typeof input !== 'string') {\n    throw new Error('Input must be string');\n  }\n  var sanitized = input\n    .replace(illegalRe, replacement)\n    .replace(controlRe, replacement)\n    .replace(reservedRe, replacement)\n    .replace(windowsReservedRe, replacement)\n    .replace(windowsTrailingRe, replacement);\n  return truncate(sanitized, 255);\n}\n\nmodule.exports = function (input, options) {\n  var replacement = (options && options.replacement) || '';\n  var output = sanitize(input, replacement);\n  if (replacement === '') {\n    return output;\n  }\n  return sanitize(output, '');\n};\n","import path from \"path\";\nimport {\n  FILE_SUFFIX,\n  IMAGE_SNAPSHOT_PREFIX,\n  PATH_VARIABLES,\n  WINDOWS_LIKE_DRIVE_REGEX,\n} from \"./constants\";\nimport sanitize from \"sanitize-filename\";\n\nconst nameCacheCounter: Record<string, number> = {};\n\nexport const generateScreenshotPath = ({\n  titleFromOptions,\n  imagesPath,\n  specPath,\n  attempt,\n}: {\n  titleFromOptions: string;\n  imagesPath: string;\n  specPath: string;\n  attempt: number;\n}) => {\n  const parsePathPartVariables = (pathPart: string, i: number) => {\n    if (pathPart === PATH_VARIABLES.specPath) {\n      return path.dirname(specPath);\n    } else if (i === 0 && !pathPart) {\n      // when unix-like absolute path\n      return PATH_VARIABLES.unixSystemRootPath;\n    } else if (i === 0 && WINDOWS_LIKE_DRIVE_REGEX.test(pathPart)) {\n      // when win-like absolute path\n      return path.join(PATH_VARIABLES.winSystemRootPath, pathPart[0]);\n    }\n\n    return pathPart;\n  };\n\n  const screenshotPath = path.join(\n    ...imagesPath.split(\"/\").map(parsePathPartVariables),\n    sanitize(titleFromOptions)\n  );\n\n  if (typeof nameCacheCounter[screenshotPath] === \"undefined\") {\n    nameCacheCounter[screenshotPath] = -1;\n  } else if (attempt > 0) {\n    nameCacheCounter[screenshotPath] -= 1;\n  }\n\n  return path.join(\n    IMAGE_SNAPSHOT_PREFIX,\n    `${screenshotPath} #${++nameCacheCounter[screenshotPath]}${\n      FILE_SUFFIX.actual\n    }.png`\n  );\n};\n\nconst screenshotPathRegex = new RegExp(\n  `^([\\\\s\\\\S]+?) #([0-9]+)(?:(?:\\\\${FILE_SUFFIX.diff})|(?:\\\\${FILE_SUFFIX.actual}))?\\\\.(?:png|PNG)$`\n);\nexport const wasScreenshotUsed = (imagePath: string) => {\n  const matched = imagePath.match(screenshotPathRegex);\n  /* c8 ignore next */ if (!matched) return false;\n  const [, screenshotPath, numString] = matched;\n  const num = parseInt(numString);\n  /* c8 ignore next */ if (!screenshotPath || isNaN(num)) return false;\n  return (\n    screenshotPath in nameCacheCounter &&\n    num <= nameCacheCounter[screenshotPath]\n  );\n};\n\nexport const resetScreenshotNameCache = () => {\n  Object.keys(nameCacheCounter).forEach((k) => delete nameCacheCounter[k]);\n};\n","import path from \"path\";\nimport fs from \"fs\";\nimport { PNG, PNGWithMetadata } from \"pngjs\";\nimport sharp from \"sharp\";\nimport { addMetadata, getMetadata } from \"meta-png\";\nimport glob from \"glob\";\nimport { version } from \"../package.json\";\nimport { wasScreenshotUsed } from \"./screenshotPath.utils\";\nimport { METADATA_KEY } from \"./constants\";\n\nexport const addPNGMetadata = (png: Buffer) =>\n  addMetadata(png, METADATA_KEY, version /* c8 ignore next */);\nexport const getPNGMetadata = (png: Buffer) =>\n  getMetadata(png, METADATA_KEY /* c8 ignore next */);\nexport const isImageCurrentVersion = (png: Buffer) =>\n  getPNGMetadata(png) === version;\nexport const isImageGeneratedByPlugin = (png: Buffer) =>\n  !!getPNGMetadata(png /* c8 ignore next */);\n\nexport const writePNG = (name: string, png: PNG | Buffer) =>\n  fs.writeFileSync(\n    name,\n    addPNGMetadata(png instanceof PNG ? PNG.sync.write(png) : png)\n  );\n\nconst inArea = (x: number, y: number, height: number, width: number) =>\n  y > height || x > width;\n\nexport const fillSizeDifference = (\n  image: PNG,\n  width: number,\n  height: number\n) => {\n  for (let y = 0; y < image.height; y++) {\n    for (let x = 0; x < image.width; x++) {\n      if (inArea(x, y, height, width)) {\n        const idx = (image.width * y + x) << 2;\n        image.data[idx] = 0;\n        image.data[idx + 1] = 0;\n        image.data[idx + 2] = 0;\n        image.data[idx + 3] = 64;\n      }\n    }\n  }\n  return image;\n  /* c8 ignore next */\n};\n\nexport const createImageResizer =\n  (width: number, height: number) => (source: PNG) => {\n    const resized = new PNG({ width, height, fill: true });\n    PNG.bitblt(source, resized, 0, 0, source.width, source.height, 0, 0);\n    return resized;\n    /* c8 ignore next */\n  };\n\nexport const scaleImageAndWrite = async ({\n  scaleFactor,\n  path,\n}: {\n  scaleFactor: number;\n  path: string;\n}) => {\n  const imgBuffer = fs.readFileSync(path);\n  if (scaleFactor === 1) return imgBuffer;\n\n  const rawImgNew = PNG.sync.read(imgBuffer);\n  const newImageWidth = Math.ceil(rawImgNew.width * scaleFactor);\n  const newImageHeight = Math.ceil(rawImgNew.height * scaleFactor);\n  await sharp(imgBuffer).resize(newImageWidth, newImageHeight).toFile(path);\n\n  return fs.readFileSync(path);\n};\n\nexport const alignImagesToSameSize = (\n  firstImage: PNGWithMetadata,\n  secondImage: PNGWithMetadata\n) => {\n  const firstImageWidth = firstImage.width;\n  const firstImageHeight = firstImage.height;\n  const secondImageWidth = secondImage.width;\n  const secondImageHeight = secondImage.height;\n\n  const resizeToSameSize = createImageResizer(\n    Math.max(firstImageWidth, secondImageWidth),\n    Math.max(firstImageHeight, secondImageHeight)\n  );\n\n  const resizedFirst = resizeToSameSize(firstImage);\n  const resizedSecond = resizeToSameSize(secondImage);\n\n  return [\n    fillSizeDifference(resizedFirst, firstImageWidth, firstImageHeight),\n    fillSizeDifference(resizedSecond, secondImageWidth, secondImageHeight),\n  ];\n};\n\nexport const cleanupUnused = (rootPath: string) => {\n  glob\n    .sync(\"**/*.png\", {\n      cwd: rootPath,\n      ignore: \"node_modules/**/*\",\n    })\n    .forEach((pngPath) => {\n      const absolutePath = path.join(rootPath, pngPath);\n      if (\n        !wasScreenshotUsed(pngPath) &&\n        isImageGeneratedByPlugin(fs.readFileSync(absolutePath))\n      ) {\n        fs.unlinkSync(absolutePath);\n      }\n    });\n};\n","import path from \"path\";\nimport { promises as fs } from \"fs\";\nimport moveFile from \"move-file\";\nimport { IMAGE_SNAPSHOT_PREFIX, PATH_VARIABLES } from \"./constants\";\n\ntype NotFalsy<T> = T extends false | null | undefined ? never : T;\n\nconst MIMIC_ROOT_WIN_REGEX = new RegExp(\n  `^${PATH_VARIABLES.winSystemRootPath}\\\\${path.sep}([A-Z])\\\\${path.sep}`\n);\nconst MIMIC_ROOT_UNIX_REGEX = new RegExp(\n  `^${PATH_VARIABLES.unixSystemRootPath}\\\\${path.sep}`\n);\n\nconst getConfigVariableOrThrow = <K extends keyof Cypress.PluginConfigOptions>(\n  config: Cypress.PluginConfigOptions,\n  name: K\n) => {\n  if (config[name]) {\n    return config[name] as NotFalsy<Cypress.PluginConfigOptions[K]>;\n  }\n\n  /* c8 ignore start */\n  throw `[@frsource/cypress-plugin-visual-regression-diff] CypressConfig.${name} cannot be missing or \\`false\\`!`;\n};\n/* c8 ignore stop */\n\nexport const parseAbsolutePath = ({\n  screenshotPath,\n  projectRoot,\n}: {\n  screenshotPath: string;\n  projectRoot: string;\n}) => {\n  let newAbsolutePath: string;\n  const matchedMimicingWinRoot = screenshotPath.match(MIMIC_ROOT_WIN_REGEX);\n  const matchedMimicingUnixRoot = screenshotPath.match(MIMIC_ROOT_UNIX_REGEX);\n  if (matchedMimicingWinRoot && matchedMimicingWinRoot[1]) {\n    const driveLetter = matchedMimicingWinRoot[1];\n    newAbsolutePath = path.join(\n      `${driveLetter}:\\\\`,\n      screenshotPath.substring(matchedMimicingWinRoot[0].length)\n    );\n  } else if (matchedMimicingUnixRoot) {\n    newAbsolutePath =\n      path.sep + screenshotPath.substring(matchedMimicingUnixRoot[0].length);\n  } else {\n    newAbsolutePath = path.join(projectRoot, screenshotPath);\n  }\n  return path.normalize(newAbsolutePath);\n};\n\nexport const initAfterScreenshotHook =\n  (config: Cypress.PluginConfigOptions) =>\n  (\n    details: Cypress.ScreenshotDetails\n  ):\n    | void\n    | Cypress.AfterScreenshotReturnObject\n    | Promise<Cypress.AfterScreenshotReturnObject> => {\n    // it's not a screenshot generated by FRSOURCE Cypress Plugin Visual Regression Diff\n    /* c8 ignore start */\n    if (details.name?.indexOf(IMAGE_SNAPSHOT_PREFIX) !== 0) return;\n    /* c8 ignore stop */\n    const screenshotsFolder = getConfigVariableOrThrow(\n      config,\n      \"screenshotsFolder\"\n    );\n    const screenshotPath = details.name.substring(\n      IMAGE_SNAPSHOT_PREFIX.length + path.sep.length\n    );\n    const newAbsolutePath = parseAbsolutePath({\n      screenshotPath,\n      projectRoot: config.projectRoot,\n    });\n\n    return (async () => {\n      await moveFile(details.path, newAbsolutePath);\n      await fs.rm(path.join(screenshotsFolder, IMAGE_SNAPSHOT_PREFIX), {\n        recursive: true,\n        force: true,\n      });\n\n      return { path: newAbsolutePath };\n    })();\n  };\n","import fs from \"fs\";\nimport { PNG } from \"pngjs\";\nimport pixelmatch, { PixelmatchOptions } from \"pixelmatch\";\nimport moveFile from \"move-file\";\nimport path from \"path\";\nimport { FILE_SUFFIX, TASK } from \"./constants\";\nimport {\n  cleanupUnused,\n  alignImagesToSameSize,\n  scaleImageAndWrite,\n  isImageCurrentVersion,\n  writePNG,\n} from \"./image.utils\";\nimport {\n  generateScreenshotPath,\n  resetScreenshotNameCache,\n} from \"./screenshotPath.utils\";\nimport type { CompareImagesTaskReturn } from \"./types\";\nimport { initAfterScreenshotHook } from \"./afterScreenshot.hook\";\n\nexport type CompareImagesCfg = {\n  scaleFactor: number;\n  title: string;\n  imgNew: string;\n  imgOld: string;\n  updateImages: boolean;\n  maxDiffThreshold: number;\n  diffConfig: PixelmatchOptions;\n};\n\nconst round = (n: number) => Math.ceil(n * 1000) / 1000;\n\nconst unlinkSyncSafe = (path: string) =>\n  fs.existsSync(path) && fs.unlinkSync(path);\nconst moveSyncSafe = (pathFrom: string, pathTo: string) =>\n  fs.existsSync(pathFrom) && moveFile.sync(pathFrom, pathTo);\n\nexport const getScreenshotPathInfoTask = (cfg: {\n  titleFromOptions: string;\n  imagesPath: string;\n  specPath: string;\n  attempt: number;\n}) => {\n  const screenshotPath = generateScreenshotPath(cfg);\n\n  return { screenshotPath, title: path.basename(screenshotPath, \".png\") };\n};\n\nexport const cleanupImagesTask = (config: Cypress.PluginConfigOptions) => {\n  if (config.env[\"pluginVisualRegressionCleanupUnusedImages\"]) {\n    cleanupUnused(config.projectRoot);\n  }\n\n  resetScreenshotNameCache();\n\n  return null;\n};\n\nexport const approveImageTask = ({ img }: { img: string }) => {\n  const oldImg = img.replace(FILE_SUFFIX.actual, \"\");\n  unlinkSyncSafe(oldImg);\n\n  const diffImg = img.replace(FILE_SUFFIX.actual, FILE_SUFFIX.diff);\n  unlinkSyncSafe(diffImg);\n\n  moveSyncSafe(img, oldImg);\n\n  return null;\n};\n\nexport const compareImagesTask = async (\n  cfg: CompareImagesCfg\n): Promise<CompareImagesTaskReturn> => {\n  const messages = [] as string[];\n  const rawImgNewBuffer = await scaleImageAndWrite({\n    scaleFactor: cfg.scaleFactor,\n    path: cfg.imgNew,\n  });\n  let imgDiff: number | undefined;\n  let imgNewBase64: string, imgOldBase64: string, imgDiffBase64: string;\n  let error = false;\n\n  if (fs.existsSync(cfg.imgOld) && !cfg.updateImages) {\n    const rawImgNew = PNG.sync.read(rawImgNewBuffer);\n    const rawImgOldBuffer = fs.readFileSync(cfg.imgOld);\n    const rawImgOld = PNG.sync.read(rawImgOldBuffer);\n    const isImgSizeDifferent =\n      rawImgNew.height !== rawImgOld.height ||\n      rawImgNew.width !== rawImgOld.width;\n\n    const [imgNew, imgOld] = isImgSizeDifferent\n      ? alignImagesToSameSize(rawImgNew, rawImgOld)\n      : [rawImgNew, rawImgOld];\n\n    const { width, height } = imgNew;\n    const diff = new PNG({ width, height });\n    const diffConfig = Object.assign({ includeAA: true }, cfg.diffConfig);\n\n    const diffPixels = pixelmatch(\n      imgNew.data,\n      imgOld.data,\n      diff.data,\n      width,\n      height,\n      diffConfig\n    );\n    imgDiff = diffPixels / (width * height);\n\n    if (isImgSizeDifferent) {\n      messages.push(\n        `Warning: Images size mismatch - new screenshot is ${rawImgNew.width}px by ${rawImgNew.height}px while old one is ${rawImgOld.width}px by ${rawImgOld.height} (width x height).`\n      );\n    }\n\n    if (imgDiff > cfg.maxDiffThreshold) {\n      messages.unshift(\n        `Image diff factor (${round(\n          imgDiff\n        )}%) is bigger than maximum threshold option ${cfg.maxDiffThreshold}.`\n      );\n      error = true;\n    }\n\n    const diffBuffer = PNG.sync.write(diff);\n    imgNewBase64 = PNG.sync.write(imgNew).toString(\"base64\");\n    imgDiffBase64 = diffBuffer.toString(\"base64\");\n    imgOldBase64 = PNG.sync.write(imgOld).toString(\"base64\");\n\n    if (error) {\n      writePNG(\n        cfg.imgNew.replace(FILE_SUFFIX.actual, FILE_SUFFIX.diff),\n        diffBuffer\n      );\n      return {\n        error,\n        message: messages.join(\"\\n\"),\n        imgDiff,\n        imgNewBase64,\n        imgDiffBase64,\n        imgOldBase64,\n        maxDiffThreshold: cfg.maxDiffThreshold,\n      };\n    } else {\n      if (rawImgOld && !isImageCurrentVersion(rawImgOldBuffer)) {\n        writePNG(cfg.imgNew, rawImgNewBuffer);\n        moveFile.sync(cfg.imgNew, cfg.imgOld);\n      } else {\n        // don't overwrite file if it's the same (imgDiff < cfg.maxDiffThreshold && !isImgSizeDifferent)\n        fs.unlinkSync(cfg.imgNew);\n      }\n    }\n  } else {\n    // there is no \"old screenshot\" or screenshots should be immediately updated\n    imgDiff = 0;\n    imgNewBase64 = \"\";\n    imgDiffBase64 = \"\";\n    imgOldBase64 = \"\";\n    writePNG(cfg.imgNew, rawImgNewBuffer);\n    moveFile.sync(cfg.imgNew, cfg.imgOld);\n  }\n\n  if (typeof imgDiff !== \"undefined\") {\n    messages.unshift(\n      `Image diff factor (${round(\n        imgDiff\n      )}%) is within boundaries of maximum threshold option ${\n        cfg.maxDiffThreshold\n      }.`\n    );\n    return {\n      message: messages.join(\"\\n\"),\n      imgDiff,\n      imgNewBase64,\n      imgDiffBase64,\n      imgOldBase64,\n      maxDiffThreshold: cfg.maxDiffThreshold,\n    };\n  }\n\n  /* c8 ignore next */\n  return null;\n};\n\nexport const doesFileExistTask = ({ path }: { path: string }) =>\n  fs.existsSync(path);\n\n/* c8 ignore start */\nexport const initTaskHook = (config: Cypress.PluginConfigOptions) => ({\n  [TASK.getScreenshotPathInfo]: getScreenshotPathInfoTask,\n  [TASK.cleanupImages]: cleanupImagesTask.bind(undefined, config),\n  [TASK.doesFileExist]: doesFileExistTask,\n  [TASK.approveImage]: approveImageTask,\n  [TASK.compareImages]: compareImagesTask,\n  [TASK.runAfterScreenshotHook]: initAfterScreenshotHook(config),\n});\n/* c8 ignore stop */\n","import { initTaskHook } from \"./task.hook\";\nimport { initAfterScreenshotHook } from \"./afterScreenshot.hook\";\n\n/* c8 ignore start */\nconst initForceDeviceScaleFactor = (on: Cypress.PluginEvents) => {\n  // based on https://github.com/cypress-io/cypress/issues/2102#issuecomment-521299946\n  on(\"before:browser:launch\", (browser, launchOptions) => {\n    if (browser.name === \"chrome\" || browser.name === \"chromium\") {\n      launchOptions.args.push(\"--force-device-scale-factor=1\");\n      launchOptions.args.push(\"--high-dpi-support=1\");\n    } else if (browser.name === \"electron\" && browser.isHeaded) {\n      // eslint-disable-next-line no-console\n      console.log(\n        \"There isn't currently a way of setting the device scale factor in Cypress when running headed electron so we disable the image regression commands.\"\n      );\n    }\n  });\n};\n/* c8 ignore stop */\n\nexport const initPlugin = (\n  on: Cypress.PluginEvents,\n  config: Cypress.PluginConfigOptions\n) => {\n  /* c8 ignore start */\n  if (config.env[\"pluginVisualRegressionForceDeviceScaleFactor\"] !== false) {\n    initForceDeviceScaleFactor(on);\n  }\n  /* c8 ignore stop */\n  on(\"task\", initTaskHook(config));\n  on(\"after:screenshot\", initAfterScreenshotHook(config));\n};\n"],"names":["PLUGIN_NAME","IMAGE_SNAPSHOT_PREFIX","FILE_SUFFIX","TASK","getScreenshotPathInfo","compareImages","approveImage","cleanupImages","doesFileExist","runAfterScreenshotHook","PATH_VARIABLES","specPath","unixSystemRootPath","winSystemRootPath","WINDOWS_LIKE_DRIVE_REGEX","METADATA_KEY","truncate","nameCacheCounter","generateScreenshotPath","titleFromOptions","imagesPath","attempt","parsePathPartVariables","pathPart","i","path","dirname","test","join","screenshotPath","split","map","sanitize","actual","screenshotPathRegex","RegExp","diff","wasScreenshotUsed","imagePath","matched","match","numString","num","parseInt","isNaN","resetScreenshotNameCache","Object","keys","forEach","k","addPNGMetadata","png","addMetadata","version","getPNGMetadata","getMetadata","isImageCurrentVersion","isImageGeneratedByPlugin","writePNG","name","fs","writeFileSync","PNG","sync","write","inArea","x","y","height","width","fillSizeDifference","image","idx","data","createImageResizer","source","resized","fill","bitblt","scaleImageAndWrite","scaleFactor","imgBuffer","readFileSync","rawImgNew","read","newImageWidth","Math","ceil","newImageHeight","sharp","resize","toFile","alignImagesToSameSize","firstImage","secondImage","firstImageWidth","firstImageHeight","secondImageWidth","secondImageHeight","resizeToSameSize","max","resizedFirst","resizedSecond","cleanupUnused","rootPath","glob","cwd","ignore","pngPath","absolutePath","unlinkSync","MIMIC_ROOT_WIN_REGEX","sep","MIMIC_ROOT_UNIX_REGEX","getConfigVariableOrThrow","config","parseAbsolutePath","projectRoot","newAbsolutePath","matchedMimicingWinRoot","matchedMimicingUnixRoot","driveLetter","substring","length","normalize","initAfterScreenshotHook","details","indexOf","screenshotsFolder","moveFile","rm","recursive","force","round","n","unlinkSyncSafe","existsSync","moveSyncSafe","pathFrom","pathTo","getScreenshotPathInfoTask","cfg","title","basename","cleanupImagesTask","env","approveImageTask","img","oldImg","replace","diffImg","compareImagesTask","messages","rawImgNewBuffer","imgNew","imgDiff","imgNewBase64","imgOldBase64","imgDiffBase64","error","imgOld","updateImages","rawImgOldBuffer","rawImgOld","isImgSizeDifferent","diffConfig","assign","includeAA","diffPixels","pixelmatch","push","maxDiffThreshold","unshift","diffBuffer","toString","message","doesFileExistTask","initTaskHook","bind","undefined","initForceDeviceScaleFactor","on","browser","launchOptions","args","isHeaded","console","log","initPlugin"],"mappings":"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"}