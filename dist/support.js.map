{"version":3,"file":"support.js","sources":["../src/constants.ts","../src/commands.ts","../src/support.ts"],"sourcesContent":["const PLUGIN_NAME = \"cp-visual-regression-diff\";\nexport const LINK_PREFIX = `#${PLUGIN_NAME}-`;\nexport const OVERLAY_CLASS = `${PLUGIN_NAME}-overlay`;\nexport const IMAGE_SNAPSHOT_PREFIX = `__${PLUGIN_NAME}_snapshots__`;\n\nexport enum FILE_SUFFIX {\n  diff = \".diff\",\n  actual = \".actual\",\n}\n\nexport const TASK = {\n  getScreenshotPathInfo: `${PLUGIN_NAME}-getScreenshotPathInfo`,\n  compareImages: `${PLUGIN_NAME}-compareImages`,\n  approveImage: `${PLUGIN_NAME}-approveImage`,\n  cleanupImages: `${PLUGIN_NAME}-cleanupImages`,\n  doesFileExist: `${PLUGIN_NAME}-doesFileExist`,\n  runAfterScreenshotHook: `${PLUGIN_NAME}-runAfterScreenshotHook`,\n  /* c8 ignore next */\n};\n\nexport const PATH_VARIABLES = {\n  specPath: \"{spec_path}\",\n  unixSystemRootPath: \"{unix_system_root_path}\",\n  winSystemRootPath: \"{win_system_root_path}\",\n} as const;\n\nexport const WINDOWS_LIKE_DRIVE_REGEX = /^[A-Z]:$/;\n\nexport const METADATA_KEY = \"FRSOURCE_CPVRD_V\";\n","import { FILE_SUFFIX, LINK_PREFIX, TASK } from \"./constants\";\nimport type pixelmatch from \"pixelmatch\";\nimport * as Base64 from \"@frsource/base64\";\nimport type { CompareImagesTaskReturn } from \"./types\";\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace Cypress {\n    type MatchImageOptions = {\n      screenshotConfig?: Partial<Cypress.ScreenshotDefaultsOptions>;\n      remoteScreenshotServiceUrl?: string;\n      diffConfig?: Parameters<typeof pixelmatch>[5];\n      updateImages?: boolean;\n      /**\n       * @deprecated since version 3.0, use imagesPath instead\n       */\n      imagesDir?: string;\n      imagesPath?: string;\n      maxDiffThreshold?: number;\n      title?: string;\n    };\n\n    interface Chainable<Subject> {\n      /**\n       * Command to create and compare image snapshots.\n       * @memberof Cypress.Chainable\n       * @example cy.get('.my-element').matchImage();\n       */\n      matchImage(options?: Cypress.MatchImageOptions): Chainable<Subject>;\n    }\n  }\n}\n\nconst constructCypressError = (log: Cypress.Log, err: Error) => {\n  // only way to throw & log the message properly in Cypress\n  // https://github.com/cypress-io/cypress/blob/5f94cad3cb4126e0567290b957050c33e3a78e3c/packages/driver/src/cypress/error_utils.ts#L214-L216\n  (err as unknown as { onFail: (e: Error) => void }).onFail = (err: Error) =>\n    log.error(err);\n  return err;\n};\n\nconst getImagesDir = (options: Cypress.MatchImageOptions) => {\n  const imagesDir =\n    options.imagesDir ||\n    (Cypress.env(\"pluginVisualRegressionImagesDir\") as string | undefined);\n\n  // TODO: remove in 4.0.0\n  if (imagesDir) {\n    console.warn(\n      \"@frsource/cypress-plugin-visual-regression-diff] `imagesDir` option is deprecated, use `imagesPath` instead (https://github.com/FRSOURCE/cypress-plugin-visual-regression-diff#configuration)\"\n    );\n  }\n\n  return imagesDir;\n};\n\nexport const getConfig = (options: Cypress.MatchImageOptions) => {\n  const imagesDir = getImagesDir(options);\n\n  return {\n    scaleFactor:\n      Cypress.env(\"pluginVisualRegressionForceDeviceScaleFactor\") === false\n        ? 1\n        : 1 / window.devicePixelRatio,\n    updateImages:\n      options.updateImages ||\n      (Cypress.env(\"pluginVisualRegressionUpdateImages\") as\n        | boolean\n        | undefined) ||\n      false,\n    imagesPath:\n      (imagesDir && `{spec_path}/${imagesDir}`) ||\n      options.imagesPath ||\n      (Cypress.env(\"pluginVisualRegressionImagesPath\") as string | undefined) ||\n      \"{spec_path}/__image_snapshots__\",\n    maxDiffThreshold:\n      options.maxDiffThreshold ||\n      (Cypress.env(\"pluginVisualRegressionMaxDiffThreshold\") as\n        | number\n        | undefined) ||\n      0.01,\n    diffConfig:\n      options.diffConfig ||\n      (Cypress.env(\"pluginVisualRegressionDiffConfig\") as\n        | Parameters<typeof pixelmatch>[5]\n        | undefined) ||\n      {},\n    screenshotConfig:\n      options.screenshotConfig ||\n      (Cypress.env(\"pluginVisualRegressionScreenshotConfig\") as\n        | Partial<Cypress.ScreenshotDefaultsOptions>\n        | undefined) ||\n      {},\n    remoteScreenshotServiceUrl:\n      options.remoteScreenshotServiceUrl ||\n      (Cypress.env(\"pluginVisualRegressionRemoteScreenshotServiceUrl\") as\n        | string\n        | undefined),\n  };\n};\n\nCypress.Commands.add(\n  \"matchImage\",\n  { prevSubject: \"optional\" },\n  (subject, options = {}) => {\n    const $el = subject as JQuery<HTMLElement> | undefined;\n    let title: string;\n\n    const {\n      scaleFactor,\n      updateImages,\n      imagesPath,\n      maxDiffThreshold,\n      diffConfig,\n      screenshotConfig,\n      remoteScreenshotServiceUrl,\n    } = getConfig(options);\n\n    return cy\n      .then(() =>\n        cy.task<{ screenshotPath: string; title: string }>(\n          TASK.getScreenshotPathInfo,\n          {\n            titleFromOptions:\n              options.title || Cypress.currentTest.titlePath.join(\" \"),\n            imagesPath,\n            specPath: Cypress.spec.relative,\n          },\n          { log: false }\n        )\n      )\n      .then(({ screenshotPath, title: titleFromTask }) => {\n        title = titleFromTask;\n\n        if (remoteScreenshotServiceUrl) {\n          return cy.document().then((doc) => {\n            return cy\n              .request({\n                url: remoteScreenshotServiceUrl,\n                method: \"POST\",\n                encoding: \"binary\",\n                body: {\n                  html: $el?.html() || doc.body.parentElement?.innerHTML,\n                },\n              } as Cypress.RequestOptions)\n              .then((response) => {\n                return cy\n                  .writeFile(screenshotPath as string, response.body, \"binary\")\n                  .task<{ path: string }>(TASK.runAfterScreenshotHook, {\n                    path: screenshotPath,\n                    name: screenshotPath,\n                  });\n              })\n              .then(({ path }) => path);\n          });\n        } else {\n          let imgPath: string;\n          return ($el ? cy.wrap($el) : cy)\n            .screenshot(screenshotPath, {\n              ...screenshotConfig,\n              onAfterScreenshot(el, props) {\n                imgPath = props.path;\n                screenshotConfig.onAfterScreenshot?.(el, props);\n              },\n              log: false,\n            })\n            .then(() => imgPath);\n        }\n      })\n      .then((imgPath) =>\n        cy\n          .task<CompareImagesTaskReturn>(\n            TASK.compareImages,\n            {\n              scaleFactor,\n              imgNew: imgPath,\n              imgOld: imgPath.replace(FILE_SUFFIX.actual, \"\"),\n              updateImages,\n              maxDiffThreshold,\n              diffConfig,\n            },\n            { log: false }\n          )\n          .then((res) => ({\n            res,\n            imgPath,\n          }))\n      )\n      .then(({ res, imgPath }) => {\n        const log = Cypress.log({\n          name: \"log\",\n          displayName: \"Match image\",\n          $el,\n        });\n\n        if (!res) {\n          log.set(\"message\", \"Unexpected error!\");\n          throw constructCypressError(log, new Error(\"Unexpected error!\"));\n        }\n\n        log.set(\n          \"message\",\n          `${res.message}${\n            res.imgDiffBase64 && res.imgNewBase64 && res.imgOldBase64\n              ? `\\n[See comparison](${LINK_PREFIX}${Base64.encode(\n                  encodeURIComponent(\n                    JSON.stringify({\n                      title,\n                      imgPath,\n                      imgDiffBase64: res.imgDiffBase64,\n                      imgNewBase64: res.imgNewBase64,\n                      imgOldBase64: res.imgOldBase64,\n                      error: res.error,\n                    })\n                  )\n                )})`\n              : \"\"\n          }`\n        );\n\n        if (res.error) {\n          log.set(\"consoleProps\", () => res);\n          throw constructCypressError(log, new Error(res.message));\n        }\n      });\n  }\n);\n","import * as Base64 from \"@frsource/base64\";\nimport \"./commands\";\nimport { LINK_PREFIX, OVERLAY_CLASS, TASK } from \"./constants\";\n\n/* c8 ignore start */\nfunction queueClear() {\n  (cy as unknown as { queue: { clear: () => void } }).queue.clear();\n  (cy as unknown as { state: (k: string, value: unknown) => void }).state(\n    \"index\",\n    0\n  );\n}\n\nfunction queueRun() {\n  // needed to run a task outside of the test processing flow\n  (cy as unknown as { queue: { run: () => void } }).queue.run();\n}\n/* c8 ignore stop */\nexport const generateOverlayTemplate = ({\n  title,\n  imgNewBase64,\n  imgOldBase64,\n  imgDiffBase64,\n  wasImageNotUpdatedYet,\n  error,\n}: {\n  title: string;\n  imgNewBase64: string;\n  imgOldBase64: string;\n  imgDiffBase64: string;\n  wasImageNotUpdatedYet: boolean;\n  error: boolean;\n}) => `<div class=\"${OVERLAY_CLASS} runner\" style=\"position:fixed;z-index:10;top:0;bottom:0;left:0;right:0;display:flex;flex-flow:column\">\n  <header style=\"position:static\">\n  <nav style=\"display:flex;width:100%;align-items:center;justify-content:space-between;padding:10px 15px;\">\n    <h2>${title} - screenshot diff</h2>\n    <form style=\"display:flex;align-items:center;gap:5px;text-align:right\">\n      ${\n        wasImageNotUpdatedYet\n          ? `<button type=\"submit\"><i class=\"fa fa-check\"></i> Update screenshot</button>`\n          : error\n          ? \"Image was already updated, rerun test to see new comparison\"\n          : \"\"\n      }\n      <button type=\"button\" data-type=\"close\"><i class=\"fa fa-times\"></i> Close</button>\n    <form>\n  </nav>\n  </header>\n  <div style=\"padding:15px;overflow:auto\">\n    <div style=\"display:flex;justify-content:space-evenly;align-items:flex-start;gap:15px\">\n      <div\n        style=\"position:relative;background:#fff;border:solid 15px #fff\"\n        onmouseover=\"this.querySelector('div').style.opacity=0,this.querySelector('img').style.opacity=1\"\n        onmouseleave=\"this.querySelector('div').style.opacity=1,this.querySelector('img').style.opacity=0\"\n      >\n        <h3>New screenshot (hover mouse away too see the old one):</h3>\n        <img style=\"min-width:300px;width:100%;opacity:0\" src=\"data:image/png;base64,${imgNewBase64}\" />\n        <div style=\"position:absolute;top:0;left:0;background:#fff\">\n          <h3>Old screenshot (hover over to see the new one):</h3>\n          <img style=\"min-width:300px;width:100%\" src=\"data:image/png;base64,${imgOldBase64}\" />\n        </div>\n      </div>\n      <div style=\"background:#fff;border:solid 15px #fff\">\n        <h3>Diff between new and old screenshot</h3>\n        <img style=\"min-width:300px;width:100%\" src=\"data:image/png;base64,${imgDiffBase64}\" />\n      </div>\n    </div>\n  </div>\n</div>`;\n\n/* c8 ignore start */\nbefore(() => {\n  if (!top) return null;\n  Cypress.$(`.${OVERLAY_CLASS}`, top.document.body).remove();\n});\n\nafter(() => {\n  if (!top) return null;\n\n  cy.task(TASK.cleanupImages, { log: false });\n\n  Cypress.$(top.document.body).on(\n    \"click\",\n    `a[href^=\"${LINK_PREFIX}\"]`,\n    function (e) {\n      e.preventDefault();\n      if (!top) return false;\n\n      const {\n        title,\n        imgPath,\n        imgDiffBase64,\n        imgNewBase64,\n        imgOldBase64,\n        error,\n      } = JSON.parse(\n        decodeURIComponent(\n          Base64.decode(\n            e.currentTarget.getAttribute(\"href\").substring(LINK_PREFIX.length)\n          )\n        )\n      );\n      queueClear();\n\n      cy.task<boolean>(\n        TASK.doesFileExist,\n        { path: imgPath },\n        { log: false }\n      ).then((wasImageNotUpdatedYet) => {\n        if (!top) return false;\n        queueClear();\n\n        Cypress.$(\n          generateOverlayTemplate({\n            title,\n            imgNewBase64,\n            imgOldBase64,\n            imgDiffBase64,\n            error,\n            wasImageNotUpdatedYet,\n          })\n        ).appendTo(top.document.body);\n\n        const wrapper = Cypress.$(`.${OVERLAY_CLASS}`, top.document.body);\n        wrapper.on(\"click\", 'button[data-type=\"close\"]', function () {\n          wrapper.remove();\n        });\n\n        wrapper.on(\"submit\", \"form\", function (e) {\n          e.preventDefault();\n\n          cy.task(TASK.approveImage, { img: imgPath }).then(() =>\n            wrapper.remove()\n          );\n\n          queueRun();\n        });\n      });\n\n      queueRun();\n\n      return false;\n    }\n  );\n});\n/* c8 ignore stop */\n"],"names":["PLUGIN_NAME","LINK_PREFIX","OVERLAY_CLASS","FILE_SUFFIX","TASK","getScreenshotPathInfo","compareImages","approveImage","cleanupImages","doesFileExist","runAfterScreenshotHook","constructCypressError","log","err","onFail","error","getImagesDir","options","imagesDir","Cypress","env","console","warn","getConfig","scaleFactor","window","devicePixelRatio","updateImages","imagesPath","maxDiffThreshold","diffConfig","screenshotConfig","remoteScreenshotServiceUrl","Commands","add","prevSubject","subject","$el","title","cy","then","task","titleFromOptions","currentTest","titlePath","join","specPath","spec","relative","screenshotPath","titleFromTask","document","doc","request","url","method","encoding","body","html","parentElement","innerHTML","response","writeFile","path","name","imgPath","wrap","screenshot","onAfterScreenshot","el","props","imgNew","imgOld","replace","actual","res","displayName","set","Error","message","imgDiffBase64","imgNewBase64","imgOldBase64","Base64","encode","encodeURIComponent","JSON","stringify","queueClear","queue","clear","state","queueRun","run","generateOverlayTemplate","wasImageNotUpdatedYet","before","top","$","remove","after","on","e","preventDefault","parse","decodeURIComponent","decode","currentTarget","getAttribute","substring","length","appendTo","wrapper","img"],"mappings":"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"}